{"version":3,"file":"server.js","mappings":";;;;;;;;;;;;;;;;AAA8B;AAC9B,eAAe,qDAAc;AAC7B;AACA,mBAAmB,YAAY,MAAM,QAAQ;AAC7C;AACA,CAAC;AACD;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;ACXQ;AAC9B,eAAe,2DAAoB;AACnC;AACA,YAAY,0DAAmB;AAC/B;AACA,YAAY,mEAA0B;AACtC,oBAAoB,6DAAsB,CAAC,8DAAuB;AAClE;AACA,aAAa,GAAG,4DAAqB;AACrC,SAAS;AACT;AACA,CAAC;AACD,iEAAe,MAAM,EAAC;;;;;;;;;;;ACZtB;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAC4B;AAC5B,oDAAa;AACW;AACa;AACP;AACQ;AACV;AACU;AACZ;AACI;AAC9B,YAAY,8CAAO;AACnB;AACA;AACA,oBAAoB,sDAAO;AAC3B;AACA;AACA;AACA,cAAc;AACd,CAAC;AACD;AACA;AACA,6BAA6B;AAC7B,QAAQ,6CAAM,KAAK;AACnB,QAAQ,kDAAW,KAAK;AACxB,QAAQ,uDAAe,KAAK;AAC5B,QAAQ,6DAAqB,GAAG,gBAAgB;AAChD;AACA,QAAQ,wDAAc,CAAC,gDAAS,4BAA4B,mBAAmB;AAC/E;AACA;AACA,IAAI,mDAAU;AACd;AACA,iBAAiB,gDAAS,cAAc,4BAA4B,EAAE,SAAS,OAAO,mDAAY,UAAU,0BAA0B,OAAO,iDAAU,UAAU,yBAAyB;AAC1L,KAAK;AACL;AACA,CAAC;AACD;AACA;AAC8B;AAC9B,gBAAgB,4CAAS;AACzB;AACA,iBAAiB,mDAAY;AAC7B,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,oBAAoB,iDAAU,mBAAmB,yBAAyB;AAC1E,KAAK;AACL;AACA","sources":["webpack://MERN-Hello-World/./server/api/index.ts","webpack://MERN-Hello-World/./server/logger/index.ts","webpack://MERN-Hello-World/external commonjs \"body-parser\"","webpack://MERN-Hello-World/external commonjs \"chalk\"","webpack://MERN-Hello-World/external commonjs \"compression\"","webpack://MERN-Hello-World/external commonjs \"dotenv\"","webpack://MERN-Hello-World/external commonjs \"express\"","webpack://MERN-Hello-World/external commonjs \"express-session\"","webpack://MERN-Hello-World/external commonjs \"helmet\"","webpack://MERN-Hello-World/external commonjs \"path\"","webpack://MERN-Hello-World/external commonjs \"winston\"","webpack://MERN-Hello-World/webpack/bootstrap","webpack://MERN-Hello-World/webpack/runtime/compat get default export","webpack://MERN-Hello-World/webpack/runtime/define property getters","webpack://MERN-Hello-World/webpack/runtime/hasOwnProperty shorthand","webpack://MERN-Hello-World/webpack/runtime/make namespace object","webpack://MERN-Hello-World/./server/index.ts"],"sourcesContent":["import express from 'express';\nconst router = express.Router();\nrouter.all(\"/\", (req, _res, next) => {\n    console.log(`${req.method} for ${req.url}`);\n    next();\n});\nrouter.get(\"*\", function (_req, res) {\n    res.json({\n        \"Name\": \"Samuel\"\n    });\n});\nexport default router;\n","import winston from 'winston';\nconst logger = winston.createLogger({\n    level: 'silly',\n    format: winston.format.json(),\n    transports: [\n        new winston.transports.Console({\n            format: winston.format.combine(winston.format.colorize({\n                all: true\n            }), winston.format.simple())\n        }),\n    ]\n});\nexport default logger;\n","module.exports = require(\"body-parser\");","module.exports = require(\"chalk\");","module.exports = require(\"compression\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-session\");","module.exports = require(\"helmet\");","module.exports = require(\"path\");","module.exports = require(\"winston\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint no-undefined: \"off\" */\nimport dotenv from 'dotenv';\ndotenv.config();\nimport path from 'path';\nimport bodyParser from 'body-parser';\nimport express from 'express';\nimport compression from 'compression';\nimport helmet from 'helmet';\nimport session from 'express-session';\nimport chalk from 'chalk';\nimport logger from './logger';\nconst app = express();\nconst PORT = process.env.PORT;\n/****************** Sessions ******************/\nconst sessionInfo = session({\n    secret: 'YOUR_SECRET_HERE',\n    resave: true,\n    saveUninitialized: true,\n    cookie: { maxAge: 600000 }\n});\napp.use(sessionInfo);\n/****************** Server Options ******************/\nconst cacheTime = 172800000; // 2 Days in ms - Tells clients to cache static files\napp.use(helmet()); // Sets some good default headers\napp.use(compression()); // Enables gzip compression\napp.use(bodyParser.json()); // Lets express handle JSON encoded data sent on the body of requests\napp.use(bodyParser.urlencoded({ extended: true }));\n/****************** Serve Static Files --> JS, CSS, IMAGES ETC ******************/\napp.use(express.static(path.join(__dirname, '../public'), { maxAge: cacheTime }));\n/****************** Log Requests ******************/\napp.use('*', (req, _res, next) => {\n    logger.log({\n        level: 'info',\n        message: chalk.red(`\\nREQUEST ${JSON.stringify(req.method)} ${req.path}\\n`) + chalk.yellow(`QUERY ${JSON.stringify(req.query)}\\n`) + chalk.cyan(`BODY: ${JSON.stringify(req.body)}`)\n    });\n    next();\n});\n/****************** Route Handling ******************/\n// Use api.js for any and all requests made to /api\nimport apiRouter from './api';\napp.use('/api', apiRouter);\napp.use('/*', (_req, res) => {\n    res.sendFile(path.resolve(\"./public/index.html\"));\n});\n// Return a 404 page for all other requests - This should be the last get/put/post/delete/all/use call for app\napp.use(\"*\", (_req, res) => {\n    res.status(404).send(`<h1>404 Page Not Found</h1>`);\n});\nfunction startServer() {\n    app.listen(PORT, () => {\n        console.log(chalk.blue(`App is live on ${process.env.DEV_BASE_URL}`));\n    });\n}\nstartServer();\n"],"names":[],"sourceRoot":""}